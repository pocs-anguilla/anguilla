diff --git a/CMakeLists.txt b/CMakeLists.txt
index f38798dd..8971dad8 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -6,8 +6,8 @@
 #         * examples/CMakeLists.txt
 #         * doc/CMakeLists.txt
 #####################################################################
-project( shark )
-cmake_minimum_required( VERSION 3.1 FATAL_ERROR)
+cmake_minimum_required( VERSION 3.4 FATAL_ERROR)
+project( shark LANGUAGES CXX )
 
 set_property(GLOBAL PROPERTY USE_FOLDERS ON)
 INCLUDE (CheckFunctionExists)
@@ -303,90 +303,45 @@ if( ENABLE_SIMD )
 endif()
 
 option( ENABLE_CBLAS "Use Installed Linear Algebra Library" ON )
-set(CBLAS_LIBRARY_PATH "/usr/lib64/" CACHE PATH "Linear algebra library path")
-set(CBLAS_INCLUDE_PATH "/usr/include/" CACHE PATH "Linear algebra include path")
-if( ENABLE_CBLAS )
-	set(CBLAS_VENDOR FALSE)
-	if( APPLE )
-		set(CBLAS_VENDOR "Accelerate")
-		set(CBLAS_INCLUDES "")
-		set(CBLAS_LIBRARIES "-framework Accelerate" )
-	else()
-		#todo: do a propper vendor check
-		find_library(OPENBLAS_LIBRARY openblas
-			HINTS ${CBLAS_LIBRARY_PATH}
-		)
-		find_library(CBLAS_LIBRARY cblas
-			HINTS ${CBLAS_LIBRARY_PATH}
-		)
-		find_library(CLAPACK_LIBRARY lapack
-			HINTS ${CBLAS_LIBRARY_PATH}
-		)
-		find_library(ATLAS_LIBRARY atlas
-			HINTS ${CBLAS_LIBRARY_PATH}
-		)
-		mark_as_advanced(
-			OPENBLAS_LIBRARY
-			CBLAS_LIBRARY
-			CLAPACK_LIBRARY
-			ATLAS_LIBRARY
-		)
-		
-		find_file(CBLAS_INCLUDES cblas.h 
-			PATHS ${CBLAS_INCLUDE_PATH}
-		)
-		
-		if( OPENBLAS_LIBRARY AND CBLAS_INCLUDES)
-			#check whether openblas includes cblas
-			check_library_exists(${OPENBLAS_LIBRARY} cblas_dgemm "" OPENBLAS_HAS_CBLAS)
-		endif()
-	
 
-		if( OPENBLAS_LIBRARY AND CBLAS_INCLUDES AND OPENBLAS_HAS_CBLAS)
-			set(CBLAS_VENDOR "OpenBLAS")
-			set(CBLAS_LIBRARIES ${OPENBLAS_LIBRARY})
-		elseif( CBLAS_LIBRARY AND CLAPACK_LIBRARY AND ATLAS_LIBRARY AND CBLAS_INCLUDES)
-			set(CBLAS_VENDOR "ATLAS")
-			set(CBLAS_LIBRARIES ${CLAPACK_LIBRARY} ${CBLAS_LIBRARY} ${ATLAS_LIBRARY})
-		elseif( CBLAS_LIBRARY AND CBLAS_INCLUDES)
-			#check that we can compile a basic program with the libraries we have found
-			#vendor versions might come with additional libraries which would be bad.
-			try_compile(CBLAS_COMPILE 
+if( ENABLE_CBLAS )
+	set(CBLAS_FOUND FALSE)
+	find_package(BLAS)
+	find_package(LAPACK)
+
+	if (BLAS_FOUND)
+		find_package(CBLAS)
+		if(CBLAS_LIBRARIES AND CBLAS_INCLUDE_DIRS)
+			find_file(CBLAS_INCLUDES cblas.h PATHS ${CBLAS_INCLUDE_DIRS})
+			try_compile(CBLAS_FOUND 
 				"${PROJECT_BINARY_DIR}/cBlasCheck"
 				"${CMAKE_SOURCE_DIR}/cBlasCheck.cpp"
-				CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${CBLAS_INCLUDE_PATH}"
-				LINK_LIBRARIES ${CBLAS_LIBRARY}
+				CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${CBLAS_INCLUDE_DIRS}"
+				LINK_LIBRARIES ${CBLAS_LIBRARIES}
 			)
-			if(CBLAS_COMPILE)
-				set(CBLAS_VENDOR "GENERIC")
-				set(CBLAS_LIBRARIES ${CBLAS_LIBRARY})
-			else()
-				message(WARNING "Can not compile basic program with cblas library")
-			endif()
 		endif()
 	endif()
-	
-	if(CBLAS_VENDOR)
-		message(STATUS "CBLAS FOUND: " ${CBLAS_VENDOR})
-		message(STATUS "CBLAS include file " ${CBLAS_INCLUDES} )
-		message(STATUS "CBLAS library files " ${CBLAS_LIBRARIES} )
+
+	if(CBLAS_FOUND)
+		message(STATUS "CBLAS include file " ${CBLAS_INCLUDES})
+		message(STATUS "CBLAS library files " ${CBLAS_LIBRARIES})
 		set(SHARK_USE_CBLAS 1)
-		list(APPEND EXTRA_INCLUDE_DIRECTORIES ${CBLAS_INCLUDE_PATH} )
+		list(APPEND EXTRA_INCLUDE_DIRECTORIES ${CBLAS_INCLUDE_DIRS})
 		list(APPEND LINK_LIBRARIES ${CBLAS_LIBRARIES})
-		include_directories ( ${CBLAS_INCLUDE_PATH} )
+		include_directories(${CBLAS_INCLUDE_DIRS})
 	else()
 		message(STATUS "No usable CBLAS Library found. No fast linear Algebra used.")
 	endif()
 	
 	#Special setup for ATLAS
-	if( CBLAS_VENDOR MATCHES "ATLAS" )
+	if(BLA_VENDOR MATCHES "ATLAS")
 		set( SHARK_USE_ATLAS_LAPACK 1) # ATLAS always contains some LAPACK methods that we can use
 	endif()
 
-	if(CLAPACK_LIBRARY)
+	if(LAPACK_FOUND)
 		#check for full lapack
 		set(CMAKE_REQUIRE_QUIET 1)
-		set(CMAKE_REQUIRED_LIBRARIES ${CBLAS_LIBRARIES})
+		set(CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARIES})
 		check_function_exists(dsyev_ HAS_FULL_LAPACK)
 		
 		if( HAS_FULL_LAPACK )
@@ -394,6 +349,7 @@ if( ENABLE_CBLAS )
 			message(STATUS "Using Lapack!")
 		endif()
 	endif()
+
 endif()
 
 #####################################################################
@@ -518,6 +474,7 @@ if(BUILD_DOCUMENTATION)
 	add_subdirectory(doc)
 endif()
 
+
 ###################################################################
 #                       CPACK PACKAGING
 ###################################################################
diff --git a/contrib/FindCBLAS.cmake b/contrib/FindCBLAS.cmake
new file mode 100644
index 00000000..fa97ce9f
--- /dev/null
+++ b/contrib/FindCBLAS.cmake
@@ -0,0 +1,75 @@
+
+# ==================================================================================================
+# This file is part of the CLBlast project. The project is licensed under Apache Version 2.0. This
+# project loosely follows the Google C++ styleguide and uses a tab-size of two spaces and a max-
+# width of 100 characters per line.
+#
+# Author(s):
+#   Cedric Nugteren <www.cedricnugteren.nl>
+#
+# ==================================================================================================
+#
+# Defines the following variables:
+#   CBLAS_FOUND          Boolean holding whether or not the Netlib BLAS library was found
+#   CBLAS_INCLUDE_DIRS   The Netlib BLAS include directory
+#   CBLAS_LIBRARIES      The Netlib BLAS library
+#
+# In case BLAS is not installed in the default directory, set the CBLAS_ROOT variable to point to
+# the root of BLAS, such that 'cblas.h' can be found in $CBLAS_ROOT/include. This can either be
+# done using an environmental variable (e.g. export CBLAS_ROOT=/path/to/BLAS) or using a CMake
+# variable (e.g. cmake -DCBLAS_ROOT=/path/to/BLAS ..).
+#
+# ==================================================================================================
+
+# Sets the possible install locations
+set(CBLAS_HINTS
+  ${CBLAS_ROOT}
+  $ENV{CBLAS_ROOT}
+)
+set(CBLAS_PATHS
+  /usr
+  /usr/local
+  /usr/local/opt
+  /System/Library/Frameworks
+)
+
+# Finds the include directories
+find_path(CBLAS_INCLUDE_DIRS
+  NAMES cblas.h
+  HINTS ${CBLAS_HINTS}
+  PATH_SUFFIXES
+    include inc include/x86_64 include/x64
+    openblas/include include/blis blis/include blis/include/blis
+    Accelerate.framework/Versions/Current/Frameworks/vecLib.framework/Versions/Current/Headers
+  PATHS ${CBLAS_PATHS}
+  DOC "Netlib BLAS include header cblas.h"
+)
+mark_as_advanced(CBLAS_INCLUDE_DIRS)
+
+# Finds the library
+find_library(CBLAS_LIBRARIES
+  NAMES cblas blas blis openblas accelerate
+  HINTS ${CBLAS_HINTS}
+  PATH_SUFFIXES
+    lib lib64 lib/x86_64 lib/x64 lib/x86 lib/Win32 lib/import lib64/import
+    openblas/lib blis/lib lib/atlas-base
+  PATHS ${CBLAS_PATHS}
+  DOC "Netlib BLAS library"
+)
+mark_as_advanced(CBLAS_LIBRARIES)
+
+# ==================================================================================================
+
+# Notification messages
+if(NOT CBLAS_INCLUDE_DIRS)
+    message(STATUS "Could NOT find 'cblas.h', install a CPU Netlib BLAS or set CBLAS_ROOT")
+endif()
+if(NOT CBLAS_LIBRARIES)
+    message(STATUS "Could NOT find a CPU Netlib BLAS library, install it or set CBLAS_ROOT")
+endif()
+
+# Determines whether or not BLAS was found
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(CBLAS DEFAULT_MSG CBLAS_INCLUDE_DIRS CBLAS_LIBRARIES)
+
+# ==================================================================================================
